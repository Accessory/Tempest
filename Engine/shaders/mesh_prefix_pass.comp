#version 440

struct VkDrawIndexedIndirectCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;    // prefix sum
    int  vertexOffset;  // can be abused to offset into var_buffer
    uint firstInstance; // caps: should be zero

    uint self;
    uint vboOffset;
    uint padd1;
};

layout(binding = 0, std430) buffer EngineInternal0
{
    VkDrawIndexedIndirectCommand cmd[];
} indirect;

layout(binding = 1, std430) buffer EngineInternal1
{
    uint grow;
    uint dispatchY;
    uint dispatchZ;
    uint desc[];
} _116;

layout(binding = 2, std430) buffer EngineInternal2
{
    uint grow;
    uint heap[];
} var;

layout(local_size_x = 256) in;

shared uint maxInd;
shared uint partialSummIbo[gl_WorkGroupSize.x];
shared uint partialSummVbo[gl_WorkGroupSize.x];

void main() {
  uint index = gl_LocalInvocationID.x;
  uint len   = indirect.cmd.length();

  uint b = ((index+0)*len)/gl_WorkGroupSize.x;
  uint e = ((index+1)*len)/gl_WorkGroupSize.x;

  uint sumVbo = 0;
  uint sumIbo = 0;
  for(uint i=b; i<e; ++i) {
    sumIbo += indirect.cmd[i].indexCount;
    sumVbo += indirect.cmd[i].instanceCount;
    }
  partialSummIbo[index] = sumIbo;
  partialSummVbo[index] = sumVbo;

  memoryBarrierShared();
  barrier();

  uint prefixIbo = 0;
  uint prefixVbo = 0;
  for(uint i=0; i<index; ++i) {
    prefixIbo += partialSummIbo[i];
    prefixVbo += partialSummVbo[i];
    }
  if(index==255) {
    maxInd = prefixIbo + partialSummIbo[index];
    }

  memoryBarrierShared();
  barrier();

  for(uint i=b; i<e; ++i) {
    uint s = prefixIbo;
    prefixIbo += indirect.cmd[i].indexCount;

    uint v = prefixVbo;
    prefixVbo += indirect.cmd[i].instanceCount;

    indirect.cmd[i].indexCount    = 0;
    indirect.cmd[i].instanceCount = 1;
    indirect.cmd[i].firstIndex    = s;
    indirect.cmd[i].vertexOffset  = 0;
    indirect.cmd[i].firstInstance = 0;
    indirect.cmd[i].vboOffset     = maxInd + v;
    }
  }

#version 450

#extension GL_EXT_control_flow_attributes:enable

layout(local_size_x = 256) in;

struct IndirectCommand
{
  uint indexCount;
  uint varyingCount;
};

struct VkDrawIndexedIndirectCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;    // prefix sum
    int  vertexOffset;  // can be abused to offset into var_buffer
    uint firstInstance; // caps: should be zero
    uint vboOffset;     // prefix sum
};

layout(binding = 0, std430) buffer EngineInternal0
{
    IndirectCommand cmd[];
} indirectSrc;

layout(binding = 1, std430) buffer EngineInternal1
{
    uint varGrow;
    uint grow;
    uint meshletCount;
    uint dispatchX;
    uint dispatchY;
    uint dispatchZ;
    uint desc[];
} mesh;

layout(binding = 2, std430) readonly buffer EngineInternal2
{
    uint heap[];
} var;

layout(binding = 3, std430) writeonly buffer EngineInternal3
{
    VkDrawIndexedIndirectCommand cmd[];
} indirect;

layout(binding = 4, std430) writeonly buffer EngineInternal4 // unused
{
  uint    heap[];
} compacted;

shared uint maxInd;
shared uint partialSummIbo[gl_WorkGroupSize.x];
shared uint partialSummVbo[gl_WorkGroupSize.x];

layout(push_constant, std140) uniform UboPush {
  uint indirectCmdCount;
  };

void main() {
  uint index = gl_LocalInvocationID.x;
  uint len   = indirectCmdCount;

  uint b = ((index+0)*len)/gl_WorkGroupSize.x;
  uint e = ((index+1)*len)/gl_WorkGroupSize.x;

  uint sumVbo = 0;
  uint sumIbo = 0;
  [[loop]]
  for(uint i=b; i<e; ++i) {
    sumIbo += indirectSrc.cmd[i].indexCount;
    sumVbo += indirectSrc.cmd[i].varyingCount;
    }
  partialSummIbo[index] = sumIbo;
  partialSummVbo[index] = sumVbo;

  memoryBarrierShared();
  barrier();

  uint prefixIbo = 0;
  uint prefixVbo = 0;
  for(uint i=0; i<index; ++i) {
    prefixIbo += partialSummIbo[i];
    prefixVbo += partialSummVbo[i];
    }

  [[branch]]
  if(index==255) {
    maxInd         = prefixIbo + partialSummIbo[index];
    mesh.meshletCount = mesh.grow;
    mesh.dispatchX    = (mesh.grow+64-1)/64;
    mesh.dispatchY    = 1;
    mesh.dispatchZ    = 1;

    mesh.varGrow      = 0;
    mesh.grow         = 0;
    }

  memoryBarrierShared();
  barrier();

  [[loop]]
  for(uint i=b; i<e; ++i) {
    uint indexCount   = indirectSrc.cmd[i].indexCount;
    uint varyingCount = indirectSrc.cmd[i].varyingCount;

    uint s = prefixIbo;
    prefixIbo += indexCount;

    uint v = prefixVbo;
    prefixVbo += varyingCount;

    uint inst = indexCount>0 ? 1 : 0;

    indirect.cmd[i].indexCount    = 0;
    indirect.cmd[i].instanceCount = inst;
    indirect.cmd[i].firstIndex    = s;
    indirect.cmd[i].vertexOffset  = 0;
    indirect.cmd[i].firstInstance = 0;
    indirect.cmd[i].vboOffset     = maxInd + v;
    }

  for(uint i=b; i<e; ++i) {
    indirectSrc.cmd[i].indexCount   = 0;
    indirectSrc.cmd[i].varyingCount = 0;
    }
  }
